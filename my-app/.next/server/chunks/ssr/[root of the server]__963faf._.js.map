{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/alip/financial-monitor/my-app/src/pages/_app.tsx"],"sourcesContent":["import { AppProps } from \"next/app\";\r\nimport \"../styles/globals.css\";\r\n\r\nfunction MyApp({ Component, pageProps }: AppProps) {\r\n  return (\r\n    <div className=\"bg-gray-50 min-h-screen\">\r\n      <Component {...pageProps} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyApp;\r\n"],"names":[],"mappings":";;;;;;AAGA,SAAS,MAAM,EAAE,SAAS,EAAE,SAAS,EAAY;IAC/C,qBACE,qKAAC;QAAI,WAAU;kBACb,cAAA,qKAAC;YAAW,GAAG,SAAS;;;;;;;;;;;AAG9B;uCAEe"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file://C%3A/alip/financial-monitor/my-app/src/pages/transactions.tsx"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\r\nimport dbConnect from \"../../lib/mongodb\";\r\nimport Transaction from \"../../models/TransactionModel\";\r\nimport { Types } from \"mongoose\";\r\n\r\nexport default async function handler(\r\n  req: NextApiRequest,\r\n  res: NextApiResponse\r\n) {\r\n  // Connect to the MongoDB database\r\n  await dbConnect();\r\n\r\n  switch (req.method) {\r\n    case \"GET\":\r\n      // Extract userId from query parameters\r\n      const userId = req.query.userId as string;\r\n\r\n      // Validate if userId is a valid ObjectId\r\n      if (!userId || !Types.ObjectId.isValid(userId)) {\r\n        return res.status(400).json({ message: \"Invalid User ID\" });\r\n      }\r\n\r\n      try {\r\n        // Query the database for transactions that match the userId\r\n        const transactions = await Transaction.find({\r\n          userId: new Types.ObjectId(userId),\r\n        });\r\n\r\n        // Return the transactions as a response\r\n        res.status(200).json(transactions);\r\n      } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({\r\n          message: \"Terjadi kesalahan saat mengambil data transaksi\",\r\n        });\r\n      }\r\n      break;\r\n\r\n    case \"POST\":\r\n      // Destructure required fields from the request body\r\n      const { userId: postUserId, type, amount, description, date } = req.body;\r\n\r\n      // Check if all required fields are provided\r\n      if (!postUserId || !type || !amount || !description || !date) {\r\n        return res.status(400).json({ message: \"Semua field harus diisi\" });\r\n      }\r\n\r\n      // Validate if postUserId is a valid ObjectId\r\n      if (!Types.ObjectId.isValid(postUserId)) {\r\n        return res.status(400).json({ message: \"Invalid User ID\" });\r\n      }\r\n\r\n      try {\r\n        // Create a new transaction instance\r\n        const newTransaction = new Transaction({\r\n          userId: new Types.ObjectId(postUserId),\r\n          type,\r\n          amount,\r\n          description,\r\n          date: new Date(date),\r\n        });\r\n\r\n        // Save the new transaction to the database\r\n        await newTransaction.save();\r\n\r\n        // Return the created transaction as the response\r\n        res.status(201).json(newTransaction);\r\n      } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({\r\n          message: \"Terjadi kesalahan saat menambahkan transaksi\",\r\n        });\r\n      }\r\n      break;\r\n\r\n    case \"DELETE\":\r\n      // Extract transactionId from the request body\r\n      const { transactionId } = req.body;\r\n\r\n      // Check if transactionId is provided\r\n      if (!transactionId) {\r\n        return res\r\n          .status(400)\r\n          .json({ message: \"Transaction ID harus disertakan\" });\r\n      }\r\n\r\n      try {\r\n        // Delete the transaction by its ID\r\n        const deletedTransaction = await Transaction.findByIdAndDelete(\r\n          transactionId\r\n        );\r\n\r\n        // Check if the transaction exists before trying to delete\r\n        if (!deletedTransaction) {\r\n          return res.status(404).json({ message: \"Transaksi tidak ditemukan\" });\r\n        }\r\n\r\n        // Return a success message\r\n        res.status(200).json({ message: \"Transaksi berhasil dihapus\" });\r\n      } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({\r\n          message: \"Terjadi kesalahan saat menghapus transaksi\",\r\n        });\r\n      }\r\n      break;\r\n\r\n    default:\r\n      // Handle unsupported HTTP methods\r\n      res.setHeader(\"Allow\", [\"GET\", \"POST\", \"DELETE\"]);\r\n      res.status(405).json({ message: `Metode ${req.method} tidak diizinkan` });\r\n      break;\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;AAGA;;;;AAEe,eAAe,QAC5B,GAAmB,EACnB,GAAoB;IAEpB,kCAAkC;IAClC,MAAM;IAEN,OAAQ,IAAI,MAAM;QAChB,KAAK;YACH,uCAAuC;YACvC,MAAM,SAAS,IAAI,KAAK,CAAC,MAAM;YAE/B,yCAAyC;YACzC,IAAI,CAAC,UAAU,CAAC,yGAAA,CAAA,QAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS;gBAC9C,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBAAE,SAAS;gBAAkB;YAC3D;YAEA,IAAI;gBACF,4DAA4D;gBAC5D,MAAM,eAAe,MAAM,YAAY,IAAI,CAAC;oBAC1C,QAAQ,IAAI,yGAAA,CAAA,QAAK,CAAC,QAAQ,CAAC;gBAC7B;gBAEA,wCAAwC;gBACxC,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YACvB,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC;gBACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBACnB,SAAS;gBACX;YACF;YACA;QAEF,KAAK;YACH,oDAAoD;YACpD,MAAM,EAAE,QAAQ,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI;YAExE,4CAA4C;YAC5C,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe,CAAC,MAAM;gBAC5D,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBAAE,SAAS;gBAA0B;YACnE;YAEA,6CAA6C;YAC7C,IAAI,CAAC,yGAAA,CAAA,QAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa;gBACvC,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBAAE,SAAS;gBAAkB;YAC3D;YAEA,IAAI;gBACF,oCAAoC;gBACpC,MAAM,iBAAiB,IAAI,YAAY;oBACrC,QAAQ,IAAI,yGAAA,CAAA,QAAK,CAAC,QAAQ,CAAC;oBAC3B;oBACA;oBACA;oBACA,MAAM,IAAI,KAAK;gBACjB;gBAEA,2CAA2C;gBAC3C,MAAM,eAAe,IAAI;gBAEzB,iDAAiD;gBACjD,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YACvB,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC;gBACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBACnB,SAAS;gBACX;YACF;YACA;QAEF,KAAK;YACH,8CAA8C;YAC9C,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,IAAI;YAElC,qCAAqC;YACrC,IAAI,CAAC,eAAe;gBAClB,OAAO,IACJ,MAAM,CAAC,KACP,IAAI,CAAC;oBAAE,SAAS;gBAAkC;YACvD;YAEA,IAAI;gBACF,mCAAmC;gBACnC,MAAM,qBAAqB,MAAM,YAAY,iBAAiB,CAC5D;gBAGF,0DAA0D;gBAC1D,IAAI,CAAC,oBAAoB;oBACvB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;wBAAE,SAAS;oBAA4B;gBACrE;gBAEA,2BAA2B;gBAC3B,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBAAE,SAAS;gBAA6B;YAC/D,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC;gBACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBACnB,SAAS;gBACX;YACF;YACA;QAEF;YACE,kCAAkC;YAClC,IAAI,SAAS,CAAC,SAAS;gBAAC;gBAAO;gBAAQ;aAAS;YAChD,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,SAAS,CAAC,OAAO,EAAE,IAAI,MAAM,CAAC,gBAAgB,CAAC;YAAC;YACvE;IACJ;AACF"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
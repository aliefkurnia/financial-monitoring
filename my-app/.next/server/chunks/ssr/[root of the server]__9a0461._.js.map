{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/alip/financial-monitor/frontend/my-app/src/components/expenseChart.tsx"],"sourcesContent":["import { PieChart } from \"react-minimal-pie-chart\";\r\n\r\ntype Expense = {\r\n  category: string;\r\n  amount: number;\r\n  color: string;\r\n};\r\n\r\ntype ExpenseChartProps = {\r\n  expenses: Expense[];\r\n};\r\n\r\nconst ExpenseChart: React.FC<ExpenseChartProps> = ({ expenses }) => {\r\n  const chartData = expenses.map((expense) => ({\r\n    title: expense.category,\r\n    value: expense.amount,\r\n    color: expense.color,\r\n  }));\r\n\r\n  return <PieChart data={chartData} />;\r\n};\r\n\r\nexport default ExpenseChart;\r\n"],"names":[],"mappings":";;;;AAAA;;;AAYA,MAAM,eAA4C,CAAC,EAAE,QAAQ,EAAE;IAC7D,MAAM,YAAY,SAAS,GAAG,CAAC,CAAC,UAAY,CAAC;YAC3C,OAAO,QAAQ,QAAQ;YACvB,OAAO,QAAQ,MAAM;YACrB,OAAO,QAAQ,KAAK;QACtB,CAAC;IAED,qBAAO,qKAAC,yJAAA,CAAA,WAAQ;QAAC,MAAM;;;;;;AACzB;uCAEe"}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file://C%3A/alip/financial-monitor/frontend/my-app/src/api/transactions.ts"],"sourcesContent":["export interface Transaction {\r\n  amount: number;\r\n  category: string;\r\n  date: string;\r\n  type: \"income\" | \"expense\";\r\n}\r\n\r\nexport const fetchTransactions = async (): Promise<Transaction[]> => {\r\n  try {\r\n    const response = await fetch(\"/api/transactions\");\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Error fetching transactions: ${errorText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching transactions:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createTransaction = async (\r\n  transaction: Transaction\r\n): Promise<Transaction> => {\r\n  try {\r\n    const response = await fetch(\"/api/transactions\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(transaction),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Error creating transaction: ${errorText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Error creating transaction:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"names":[],"mappings":";;;;AAOO,MAAM,oBAAoB;IAC/B,IAAI;QACF,MAAM,WAAW,MAAM,MAAM;QAE7B,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,MAAM,IAAI,MAAM,CAAC,6BAA6B,EAAE,WAAW;QAC7D;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,MAAM;IACR;AACF;AAEO,MAAM,oBAAoB,OAC/B;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,qBAAqB;YAChD,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;YACrB,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,MAAM,IAAI,MAAM,CAAC,4BAA4B,EAAE,WAAW;QAC5D;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM;IACR;AACF"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file://C%3A/alip/financial-monitor/frontend/my-app/src/pages/index.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport ExpenseChart from \"../components/expenseChart\";\nimport { fetchTransactions } from \"../api/transactions\";\n\ninterface Transaction {\n  amount: number;\n  category: string;\n  date: string;\n  type: \"income\" | \"expense\";\n}\n\ninterface Expense {\n  amount: number;\n  category: string;\n  color: string;\n}\n\nconst Index = () => {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n\n  useEffect(() => {\n    const getTransactions = async () => {\n      try {\n        const data = await fetchTransactions();\n        setTransactions(data);\n      } catch (error) {\n        console.error(\"Error fetching transactions:\", error);\n      }\n    };\n\n    getTransactions();\n  }, []);\n\n  const expenses = transactions\n    .filter((t) => t.type === \"expense\")\n    .map((t) => ({\n      amount: t.amount,\n      category: t.category,\n      color: \"#FF0000\",\n    }));\n\n  return (\n    <div>\n      <h1>Personal Finance Monitor</h1>\n      <ExpenseChart expenses={expenses} />{\" \"}\n    </div>\n  );\n};\n\nexport default Index;\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAeA,MAAM,QAAQ;IACZ,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAiB,EAAE;IAElE,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,kBAAkB;YACtB,IAAI;gBACF,MAAM,OAAO,MAAM,CAAA,GAAA,mHAAA,CAAA,oBAAiB,AAAD;gBACnC,gBAAgB;YAClB,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,gCAAgC;YAChD;QACF;QAEA;IACF,GAAG,EAAE;IAEL,MAAM,WAAW,aACd,MAAM,CAAC,CAAC,IAAM,EAAE,IAAI,KAAK,WACzB,GAAG,CAAC,CAAC,IAAM,CAAC;YACX,QAAQ,EAAE,MAAM;YAChB,UAAU,EAAE,QAAQ;YACpB,OAAO;QACT,CAAC;IAEH,qBACE,qKAAC;;0BACC,qKAAC;0BAAG;;;;;;0BACJ,qKAAC,2HAAA,CAAA,UAAY;gBAAC,UAAU;;;;;;YAAa;;;;;;;AAG3C;uCAEe"}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}